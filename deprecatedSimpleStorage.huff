// interface (ABI)
#define function setValue(uint256) nonpayable returns ()
#define function getValue() nonpayable returns (uint256)

#define constant VALUE = FREE_STORAGE_POINTER()

// setter for uint256
#define macro SET_VALUE() = takes(0) returns(0) {
    0x04
    calldataload

    [VALUE]
    sstore
}

// getter for uint256
#define macro GET_VALUE() = takes(0) returns(0) {
    // read uint256 from storage
    [VALUE]
    sload

    // store return value in memory
    0x00
    mstore
    // return first 32 bytes of memory containing uin256
    0x20  // back to front
    0x00
    return
}

#define macro MAIN() = takes(0) returns(0) {
    // get function selector (4 bytes)- isnt this at the end though? should it be at the beginning?
    0x00 calldataload 0xE0 shr
    // what is 0xe0? 224
    // what is shr?

    // require(bytes4(keccak256(setValue(uint256)))-- why is it necessary to do this anyways?
    dup1 __FUNC_SIG(setValue) eq setValue jumpi
    dup1 __FUNC_SIG(getValue) eq getValue jumpi

    // dispatch- what does this do?
    setValue:
        SET_VALUE()
    getValue:
        GET_VALUE()

    0x00 0x00 revert
}