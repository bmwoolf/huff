#define function addTwo(uint256, uint256) view returns(uint256)

// [0x00, 0x20, 0x40, 0x60,...]
// [0,32,64,96,...]

// take = number of items they will take from the stack
// returns =  this doesnt make sense- we are returning a variable, this should be 1
#define macro MAIN() = takes(0) returns(0) {
    // calldata is a queue

    //calldata: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ; box of paint 

    //calldata: 0xFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF ;
    index ->    0
    //stack (pallete for mixing):     0xFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
    //memory (store mixed paints here, use for later pallete mixing): 0x34
    
    // 0x00-20 + 0x20-40 
    // 0x20-40
    // 0x00-20
    // [calldata]
    // ___

    0x00 calldataload   // reads first 32 bytes of calldata on the stack- how do the numbers get on the stack in the first place?
    0x20 calldataload   // reads second 32 bytes of calldata on the stack- again, how does this number get on the stack in the first place?
    add // takes top 2 items on the stack and adds them, returns the result on the stack

    // memory = heap, the stack and memory are two different storage locations and have different opcodes to interact with them
    0x00 mstore // takes return value from add and stores it in memory at position 0x00
    0x20 0x00 return // return 0 bytes from the 0x20 location in memory
    // can you return directly from the stack?
}


///////////// lesson 2 ///////////////
#define function addTwo(uint256, uint256) view returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    // Get the function selector- 
    // 1. hash this: addTwo(uint256, uint256) view returns(uint256)
    // 2. take the first 4 bytes of the hash
    // = function selector

    // is the function selector passed in as the calldata?
    // is it passed in big or little endian

    //0f 2d 66 e3
    //calldata: 0f 2d 66 e3 
    //stack: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f 2d 66 e3 (little endian)
    //stack: 0f 2d 66 e3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (why not do it big endian?)

    // [function selector]
    // [calldata]
    // __________
    0x00 calldataload // calldata contains the function selector
    0xE0 shr          // shift out calldata by 224 bits and place the function selector onto the stack

    // Jump to the implementation of the ADD_TWO function if the calldata matches the function selector
    __FUNC_SIG(addTwo) eq addTwo jumpi

    addTwo:
        ADD_TWO()
}

#define macro ADD_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    add                   // add number 1 and 2 and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

// takes and returns
// deconstructing bytecode into opcodes and arguments